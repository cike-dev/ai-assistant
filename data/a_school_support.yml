flows:
  uni_academic_support:
    description: Handles academic support requests using RAG for answers, followed by structured help options.
    steps:
      - action: utter_academic_selected # Combines greeting/ack for a smooth start
      # - action: utter_greet_and_purpose # Combines greeting/ack for a smooth start

      - collect: user_query
        description: The user's specific academic support request

      - action: action_trigger_search # RAG runs and prints the answer directly to the user

      # CUSTOM ACTION: Check if the RAG policy succeeded in finding a good answer.
      - action: action_check_rag_success 

      - id: check_success
        noop: true
        next:
          - if: slots.rag_result_found # This slot is set by action_check_rag_success
            then: offer_more_options
          - else: no_result_found

      # - id: offer_more_options
      #   action: utter_ask_follow_up # e.g., "Did that answer your question? Would you like more detail or to contact an advisor?"
      #   next: collect_option

      - id: no_result_found
        action: utter_no_help_found # This is a failure path when RAG fails

      - id: offer_more_options
      # - id: collect_option
        collect: sch_option
        description: The user's choice (e.g., "advisor", "more_detail", "end")
        next:
          - if: slots.sch_option == "advisor"
            then: provide_advisor
          - if: slots.sch_option == "more_detail"
            then: ask_for_more_detail # Just ask the user to type their follow-up.
          - else: END # End the flow if they chose 'other' or a closing option

      - id: ask_for_more_detail
        action: utter_what_more_detail # "What else would you like to know?"
        # The flow ends here, and the CompactLLMCommandGenerator takes over to process the next user message 
        # using the context from the first RAG result.
        
      - id: provide_advisor
        action: action_trigger_search
        # action: utter_advisor_contact
        next: END

